#!/bin/bash

# cccl 
# Wrapper around MS's cl.exe to make it act more like Unix cc
#
# Copyright (C) 2000-2003 Geoffrey Wossum (gwossum@acm.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

usage()
{
    cat <<EOF
Usage: cccl [OPTIONS]

cccl is a wrapper around Microsoft's cl.exe.  It translates parameters
that Unix cc's understand to parameters that cl understand.
EOF
    exit $1
}

# Whitespace in paths is dealt with by setting IFS an using bash arrays
IFS=""

# prog specifies the program that should be run cl.exe
prog=cl
# opts specifies the command line to pass to the MSVC program
clopt=("/nologo")
linkopt=("/link")
# gotparam is 0 if we didn't ever see a param, in which case we show usage()
gotparam=

### Run through every option and convert it to the proper MS one
while test $# -gt 0; do
    case "$1" in
    -D*) optarg= ;;
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac
    gotparam=1

    case "$1" in
    --version)
	cat <<EOF
cccl 0.03 (modified for SWIG)

Copyright 2000-2003 Geoffrey Wossum
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit 1;
	;;

    -ansi)
	clopt+=("/Za")
	;;

    -c)
	# -c (compile only) is actually the same, but for clarity...
	clopt+=("/c")
	;;

    -g[0-9] | -g)
	# cl only supports one debugging level
	clopt+=("/Zi")
	;;

    -L*)
	path=`echo "$1" | sed 's/-L//'`
	linkopt+=("/LIBPATH:$path")
	;;

    -l*)
	lib=`echo "$1" | sed 's/-l//'`
#	lib="lib$lib.lib"
	lib="$lib.lib"
	
	clopt+=("$lib")
#	linkopt+=("$lib")
	;;

    -m386)
	clopt+=("/G3")
	;;

    -m486)
	clopt+=("/G4")
	;;

    -mpentium)
	clopt+=("/G5")
	;;

    -mpentiumpro)
	clopt+=("/G6")
	;;

    -o)
	# specifying output file, is it an object or an executable
	shift
	case "$1" in
	*.o | *.obj)
	    clopt+=("/Fo$1")
	;;
	
	*.exe | *.dll | *.pyd)
	    clopt+=("/Fe$1")
#	    linkopt+=("/out:$1")
	;;
	esac;;

    -pedantic)
	#ignore pedantic
	;;

    -W*)
        #ignore warnings
        ;;

    -shared)
	    clopt+=("/LD")
	;;

    *.cc | *.cxx | *.C)
	# C++ source file with non .cpp extension, make sure cl understand 
	# that it is C++
	clopt+=("/Tp$1")
	;;

#    *.o | *.obj | *.a | *.lib)
#	# Object files/libraries seen, this command will require link
#	# Switch the prog to link
#	linkopt+=("$1")
#	prog="link"
#	;;

    *)
	if test x$optarg != x ; then
	    clopt+=("$1=$optarg")
	else
	    clopt+=("$1")
	fi
	;;

    esac
    shift
done

if test x$gotparam = x ; then
    usage
    exit 1
fi

if test ${#linkopt[@]} -eq 1 ; then
    linkopt=()
fi

extraopt=(/EHsc /GR /W3)

if test -n "$CCCL_VERBOSE" ; then
  echo -n "$prog"
  for opt in "${extraopt[@]}" ; do
    echo -n " \"$opt\""
  done
  for opt in "${clopt[@]}" ; do
    echo -n " \"$opt\""
  done
  for opt in "${linkopt[@]}" ; do
    echo -n " \"$opt\""
  done
  echo ""
fi

exitcode=exec $prog ${extraopt[@]} ${clopt[@]} ${linkopt[@]}
exit $exitcode

