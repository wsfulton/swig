#!/bin/bash

# cccl 
# Wrapper around MS's cl.exe to make it act more like Unix cc
#
# Copyright (C) 2000-2003 Geoffrey Wossum (gwossum@acm.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

usage()
{
    cat <<EOF
Usage: cccl [--cccl-muffle] [--cccl-verbose] [--help] [--version] [OPTIONS]

cccl is a wrapper around Microsoft's cl.exe compiler.  It translates parameters
given by [OPTIONS] that Unix cc understands into parameters that cl understands.
EOF
}

case $MACHTYPE in
    *-msys)
        slash="-"
        ;;
    *)
        slash="/"
        ;;
esac

# prog specifies the program that should be run cl.exe
prog=cl
# opts specifies the command line to pass to the MSVC program
clopt=("${slash}nologo")
linkopt=("${slash}link")
# gotparam is 0 if we didn't ever see a param, in which case we show usage()
debug=
gotparam=
muffle=
verbose=
shared_index=-1

processargs()
{
### Run through every option and convert it to the proper MS one
while test $# -gt 0; do
    case "$1" in
    -D*) optarg= ;;
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac
    gotparam=1

    case "$1" in
    --help)
        usage
        exit 0
        ;;

    --cccl-muffle)
	# Remove the unnecessary junk that the compiler outputs to stdout
	muffle=1
	;;

    --cccl-verbose)
	verbose=1
	;;

    --version)
	cat <<EOF
cccl 0.03 (modified for SWIG)

Copyright 2000-2003 Geoffrey Wossum
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit 0;
	;;

    -ansi)
	clopt+=("${slash}Za")
	;;

    -c)
	# -c (compile only) is actually the same, but for clarity...
	clopt+=("${slash}c")
	;;

    -g[0-9] | -g)
	# cl only supports one debugging level
	clopt+=("${slash}Zi")
	debug=1
	;;

    -L*)
	path=`echo "$1" | sed 's/-L//'`
	linkopt+=("${slash}LIBPATH:$path")
	;;

    -l*)
	lib=`echo "$1" | sed 's/-l//'`
#	lib="lib$lib.lib"
	lib="$lib.lib"
	
	clopt+=("$lib")
#	linkopt+=("$lib")
	;;

    -m386)
	clopt+=("${slash}G3")
	;;

    -m486)
	clopt+=("${slash}G4")
	;;

    -mpentium)
	clopt+=("${slash}G5")
	;;

    -mpentiumpro)
	clopt+=("${slash}G6")
	;;

    -o)
	# specifying output file, is it an object or an executable
	shift
	case "$1" in
	*.o | *.obj)
	    clopt+=("${slash}Fo$1")
	;;
	
	*.exe | *.dll | *.pyd)
	    clopt+=("${slash}Fe$1")
#	    linkopt+=("${slash}out:$1")
	;;
	esac;;

    -pedantic)
	#ignore pedantic
	;;

    -W*)
        #ignore warnings
        ;;

    -shared)
	    shared_index=${#clopt[@]}
	    clopt+=("${slash}LD")
	;;

    *.cc | *.cxx | *.C)
	# C++ source file with non .cpp extension, make sure cl understand 
	# that it is C++
	clopt+=("${slash}Tp$1")
	;;

#    *.o | *.obj | *.a | *.lib)
#	# Object files/libraries seen, this command will require link
#	# Switch the prog to link
#	linkopt+=("$1")
#	prog="link"
#	;;

    /*)
        # All / options are passed to the linker
	linkopt+=("${slash}${1:1}")
	;;

    -*)
        # All - options are passed to the compiler
	if test x$optarg != x ; then
	    clopt+=("${slash}${1:1}=$optarg")
	else
	    clopt+=("${slash}${1:1}")
	fi
	;;

    *)
	clopt+=("$1")
	;;

    esac
    shift
done
}

# Whitespace in paths is dealt with by setting IFS and using bash arrays
# Except additional arguments in CCCL_OPTIONS need to be space separated
processargs $CCCL_OPTIONS
IFS=""
processargs $@

if test $shared_index -ge 0 -a -n "$debug"; then
    clopt[$shared_index]="${slash}LDd"
fi

if test x$gotparam = x ; then
    usage
    exit 1
fi

if test ${#linkopt[@]} -eq 1 ; then
    linkopt=()
fi

extraopt=(${slash}EHsc ${slash}GR ${slash}W3)

if test -n "$verbose" ; then
  echo -n "$prog"
  for opt in "${extraopt[@]}" ; do
    echo -n " \"$opt\""
  done
  for opt in "${clopt[@]}" ; do
    echo -n " \"$opt\""
  done
  for opt in "${linkopt[@]}" ; do
    echo -n " \"$opt\""
  done
  echo ""
fi

if test -z "$muffle" ; then
    exec $prog ${extraopt[@]} ${clopt[@]} ${linkopt[@]}
else
  # tr needed below for $ in regex to work (simple alternative to dos2unix)
    exec $prog ${extraopt[@]} ${clopt[@]} ${linkopt[@]} | tr -d '\r' | grep -v -e "\.cpp$" -e "\.cxx$" -e "\.cc$" -e "\.C$" -e "\.c$" -e "^   Creating library" -e "^Generating Code"
    exit ${PIPESTATUS[0]}
fi

